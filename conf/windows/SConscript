# Copyright 2010 - 2011, Qualcomm Innovation Center, Inc.
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# 

import os
Import('env')

# Set up TMP 
env['ENV']['TMP'] = os.environ['TMP']

# MSVC version 8 and higher require a manifest
if env['MSVC_VERSION'] >= '8.0':
    # Add a post-build step to embed the manifest using mt.exe
    # The number at the end of the line indicates the file type (1: EXE; 2:DLL).
    env.Append(LINKCOM=[env['LINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1'])
    env.Append(SHLINKCOM=[env['SHLINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2'])

# Windows specific compiler flags
env.Append(CPPDEFINES=['QCC_CPU_X86',
                       'UNICODE',
                       '_UNICODE',
                       'WIN32_LEAN_AND_MEAN'])

# Set MS OS version number
if env['OS'] == 'win7':
    # Windows 7
    env.Append(CPPDEFINES=[('_WIN32_WINNT', '_WIN32_WINNT_WIN7')])
elif env['OS'] == 'winxp':
    # WinXP SP3
    env.Append(CPPDEFINES=[('_WIN32_WINNT', '_WIN32_WINNT_WINXP')])
    env.Append(CPPDEFINES=[('NTDDI_VERSION', '0x05010300')])
                               
#Suppress specific warnings
env.Append(CXXFLAGS=['/wd4355'])

env.Append(CFLAGS=['/nologo', '/vmm', '/vmg'])
env.Append(CXXFLAGS=['/nologo', '/vmm', '/vmg'])

env.Append(CFLAGS=['/EHsc'])
env.Append(CXXFLAGS=['/EHsc'])

# Lib setup
env.Append(LFLAGS=['/NODEFAULTLIB:libcmt.lib'])
env.Append(LINKFLAGS=['/NODEFAULTLIB:libcmt.lib'])

# Debug/Release variants
if env['VARIANT'] == 'debug':
   # MSVC 2010 an newer require _ITERATOR_DEBUG_LEVEL specified to specify 
   # _ITERATOR_DEBUG_LEVEL _DEBUG must also be specified.  If _DEBUG is also 
   # specified then the debug version of the multithread and run-time routines
   # (/MDd') to prevent build errors. 
   if env['MSVC_VERSION'] >= '10.0':
       env.Append(CPPDEFINES=['_DEBUG', ('_ITERATOR_DEBUG_LEVEL', 2)])
       env.Append(CFLAGS=['/MDd', '/Zi', '/Od'])
       env.Append(CXXFLAGS=['/MDd', '/Zi', '/Od', '/Gd', '/Ob1'])
   else:
       env.Append(CFLAGS=['/MD', '/Zi', '/Od'])
       env.Append(CXXFLAGS=['/MD', '/Zi', '/Od', '/Gd', '/Ob1'])
   env.Append(LINKFLAGS=['/debug'])
   env.Append(JAVACFLAGS='-g -Xlint -Xlint:-serial')
else:
   # MSVC 2010 an newer require _ITERATOR_DEBUG_LEVEL specified
   if env['MSVC_VERSION'] >= '10.0':
       env.Append(CPPDEFINES=[('_ITERATOR_DEBUG_LEVEL', 0)])
   env.Append(CFLAGS=['/MD', '/Gy', '/O1', '/Ob2', '/Gd'])
   env.Append(CXXFLAGS=['/MD', '/Gy', '/O1', '/Ob2'])
   env.Append(LINKFLAGS=['/opt:ref'])
   env.Append(JAVACFLAGS='-Xlint -Xlint:-serial')

# Archive expander
def archive_expand(target, source, env):
   # Copy sources to targets
   outdir = env.subst(os.path.dirname(str(target[0])))
   for archive in source:
      Copy(outdir, str(archive))
   return None
      
def archive_expand_emitter(target, source, env):
   # target starts out as phony file in the desired output directory
   # target ends up being the list of copied libraries
   outdir = env.subst(os.path.dirname(str(target[0])))
   modTargets = []
   for archive in source:
      modTargets.append(File(outdir+os.path.sep+os.path.basename(str(archive))))
   return modTargets, source

expand_bld = Builder(action=archive_expand, emitter=archive_expand_emitter)
env.Append(BUILDERS={'ArchiveExpand' : expand_bld})
